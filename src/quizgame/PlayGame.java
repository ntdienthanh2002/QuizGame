/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quizgame;

import static connect.ConnectModifier.*;
import static models.AccountPlayerModifier.*;
import static models.ResultPlayerModifier.*;
import static quizgame.Start.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author THANH
 */
public class PlayGame extends javax.swing.JFrame {

    /**
     * Creates new form PlayGame
     */
    private String str;
    public static double startTime, endTime, time;
    private int count, ques1, ques2, ques3, ques4, ques5, ques6, ques7, ques8, ques9, ques10, ques11, ques12, quesFlip;

    public PlayGame() {
        initComponents();
        count = 1;
        startTime = System.currentTimeMillis();
        startPlay();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        javax.swing.ButtonGroup jButtonGroupAnswer = new javax.swing.ButtonGroup();
        buttonGroupAnswer = new javax.swing.ButtonGroup();
        buttonGroupHelp = new javax.swing.ButtonGroup();
        jPanelPlayGame = new javax.swing.JPanel();
        jLabelQuestion = new javax.swing.JLabel();
        jRadioButtonA = new javax.swing.JRadioButton();
        jRadioButtonB = new javax.swing.JRadioButton();
        jRadioButtonC = new javax.swing.JRadioButton();
        jRadioButtonD = new javax.swing.JRadioButton();
        jTextFieldNumber = new javax.swing.JTextField();
        jTextFieldScoreAnswerWrong = new javax.swing.JTextField();
        jButtonStop = new javax.swing.JButton();
        jTextFieldCurrentScore = new javax.swing.JTextField();
        jLabelCurrentScore = new javax.swing.JLabel();
        jLabelScoreAnswerWrong = new javax.swing.JLabel();
        jRadioButton5050 = new javax.swing.JRadioButton();
        jRadioButtonFlip = new javax.swing.JRadioButton();
        jRadioButtonDoubleDip = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quiz Game Online");

        jPanelPlayGame.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabelQuestion.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelQuestion.setText("Content of the question");

        buttonGroupAnswer.add(jRadioButtonA);
        jRadioButtonA.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButtonA.setText("Answer A");
        jRadioButtonA.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jRadioButtonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAActionPerformed(evt);
            }
        });

        buttonGroupAnswer.add(jRadioButtonB);
        jRadioButtonB.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButtonB.setText("Answer B");
        jRadioButtonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonBActionPerformed(evt);
            }
        });

        buttonGroupAnswer.add(jRadioButtonC);
        jRadioButtonC.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButtonC.setText("Answer C");
        jRadioButtonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCActionPerformed(evt);
            }
        });

        buttonGroupAnswer.add(jRadioButtonD);
        jRadioButtonD.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButtonD.setText("Answer D");
        jRadioButtonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDActionPerformed(evt);
            }
        });

        jTextFieldNumber.setEditable(false);
        jTextFieldNumber.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextFieldNumber.setText("Question:");

        jTextFieldScoreAnswerWrong.setEditable(false);
        jTextFieldScoreAnswerWrong.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextFieldScoreAnswerWrong.setText("0");

        jButtonStop.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jButtonStop.setText("Stop the game");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jTextFieldCurrentScore.setEditable(false);
        jTextFieldCurrentScore.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextFieldCurrentScore.setText("0");

        jLabelCurrentScore.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelCurrentScore.setText("Your current score");

        jLabelScoreAnswerWrong.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabelScoreAnswerWrong.setText("Your score if you answer wrong");

        buttonGroupHelp.add(jRadioButton5050);
        jRadioButton5050.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButton5050.setText("50 - 50");
        jRadioButton5050.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5050ActionPerformed(evt);
            }
        });

        buttonGroupHelp.add(jRadioButtonFlip);
        jRadioButtonFlip.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButtonFlip.setText("Flip");
        jRadioButtonFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFlipActionPerformed(evt);
            }
        });

        buttonGroupHelp.add(jRadioButtonDoubleDip);
        jRadioButtonDoubleDip.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jRadioButtonDoubleDip.setText("Double dip");
        jRadioButtonDoubleDip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDoubleDipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlayGameLayout = new javax.swing.GroupLayout(jPanelPlayGame);
        jPanelPlayGame.setLayout(jPanelPlayGameLayout);
        jPanelPlayGameLayout.setHorizontalGroup(
            jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPlayGameLayout.createSequentialGroup()
                .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jTextFieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelCurrentScore))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelScoreAnswerWrong)))
                .addGap(18, 18, 18)
                .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldScoreAnswerWrong, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldCurrentScore, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jButtonStop)
                .addGap(35, 35, 35))
            .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabelQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jRadioButtonA, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jRadioButtonB, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jRadioButtonC, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jRadioButtonD, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jRadioButton5050)
                        .addGap(118, 118, 118)
                        .addComponent(jRadioButtonFlip)
                        .addGap(132, 132, 132)
                        .addComponent(jRadioButtonDoubleDip)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPlayGameLayout.setVerticalGroup(
            jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jTextFieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPlayGameLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonStop)
                            .addComponent(jTextFieldCurrentScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCurrentScore))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldScoreAnswerWrong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelScoreAnswerWrong))))
                .addGap(45, 45, 45)
                .addComponent(jLabelQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jRadioButtonA, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonB, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonC, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonD, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanelPlayGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton5050)
                    .addComponent(jRadioButtonFlip)
                    .addComponent(jRadioButtonDoubleDip))
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPlayGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPlayGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPlay() {
        createConnection();
        jRadioButtonA.setEnabled(true);
        jRadioButtonB.setEnabled(true);
        jRadioButtonC.setEnabled(true);
        jRadioButtonD.setEnabled(true);
        jButtonStop.setEnabled(true);

        try {
            jTextFieldNumber.setText("Question " + count + ":");
            Statement st = conn.createStatement();
            Statement st0 = conn.createStatement();
            int no = count - 1;
            ResultSet rs = st.executeQuery("select * from PointConvention where No = " + no);
            ResultSet rs0 = st0.executeQuery("select * from PointConvention where No = " + count);
            while (rs.next()) {
                jTextFieldCurrentScore.setText(rs.getString("RightAnswer"));
            }
            while (rs0.next()) {
                jTextFieldScoreAnswerWrong.setText(rs0.getString("WrongAnswer"));
            }
            switch (count) {
                case 1:
                    Statement st1 = conn.createStatement();
                    ResultSet rs1 = st1.executeQuery("select top 1 * from Questions where [Level] = 1 order by NEWID()");
                    while (rs1.next()) {
                        jLabelQuestion.setText(rs1.getString("Question"));
                        jRadioButtonA.setText(rs1.getString("Answer1"));
                        jRadioButtonB.setText(rs1.getString("Answer2"));
                        jRadioButtonC.setText(rs1.getString("Answer3"));
                        jRadioButtonD.setText(rs1.getString("Answer4"));
                        str = rs1.getString("RightAnswer").trim();
                        ques1 = rs1.getInt("QuesID");
                    }
                    break;
                case 2:
                    Statement st2 = conn.createStatement();
                    ResultSet rs2 = st2.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques1 + ") and [Level] = 1 order by NEWID()");
                    while (rs2.next()) {
                        jLabelQuestion.setText(rs2.getString("Question"));
                        jRadioButtonA.setText(rs2.getString("Answer1"));
                        jRadioButtonB.setText(rs2.getString("Answer2"));
                        jRadioButtonC.setText(rs2.getString("Answer3"));
                        jRadioButtonD.setText(rs2.getString("Answer4"));
                        str = rs2.getString("RightAnswer").trim();
                        ques2 = rs2.getInt("QuesID");
                    }
                    break;
                case 3:
                    Statement st3 = conn.createStatement();
                    ResultSet rs3 = st3.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques1 + ", " + ques2 + ") and [Level] = 1 order by NEWID()");
                    while (rs3.next()) {
                        jLabelQuestion.setText(rs3.getString("Question"));
                        jRadioButtonA.setText(rs3.getString("Answer1"));
                        jRadioButtonB.setText(rs3.getString("Answer2"));
                        jRadioButtonC.setText(rs3.getString("Answer3"));
                        jRadioButtonD.setText(rs3.getString("Answer4"));
                        str = rs3.getString("RightAnswer").trim();
                        ques3 = rs3.getInt("QuesID");
                    }
                    break;
                case 4:
                    Statement st4 = conn.createStatement();
                    ResultSet rs4 = st4.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques1 + ", " + ques2 + ", " + ques3 + ") and [Level] = 1 order by NEWID()");
                    while (rs4.next()) {
                        jLabelQuestion.setText(rs4.getString("Question"));
                        jRadioButtonA.setText(rs4.getString("Answer1"));
                        jRadioButtonB.setText(rs4.getString("Answer2"));
                        jRadioButtonC.setText(rs4.getString("Answer3"));
                        jRadioButtonD.setText(rs4.getString("Answer4"));
                        str = rs4.getString("RightAnswer").trim();
                        ques4 = rs4.getInt("QuesID");
                    }
                    break;
                case 5:
                    Statement st5 = conn.createStatement();
                    ResultSet rs5 = st5.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques1 + ", " + ques2 + ", " + ques3 + ", " + ques4 + ") and [Level] = 1 order by NEWID()");
                    while (rs5.next()) {
                        jLabelQuestion.setText(rs5.getString("Question"));
                        jRadioButtonA.setText(rs5.getString("Answer1"));
                        jRadioButtonB.setText(rs5.getString("Answer2"));
                        jRadioButtonC.setText(rs5.getString("Answer3"));
                        jRadioButtonD.setText(rs5.getString("Answer4"));
                        str = rs5.getString("RightAnswer").trim();
                        ques5 = rs5.getInt("QuesID");
                    }
                    break;
                case 6:
                    Statement st6 = conn.createStatement();
                    ResultSet rs6 = st6.executeQuery("select top 1 * from Questions where [Level] = 2 order by NEWID()");
                    while (rs6.next()) {
                        jLabelQuestion.setText(rs6.getString("Question"));
                        jRadioButtonA.setText(rs6.getString("Answer1"));
                        jRadioButtonB.setText(rs6.getString("Answer2"));
                        jRadioButtonC.setText(rs6.getString("Answer3"));
                        jRadioButtonD.setText(rs6.getString("Answer4"));
                        str = rs6.getString("RightAnswer").trim();
                        ques6 = rs6.getInt("QuesID");
                    }
                    break;
                case 7:
                    Statement st7 = conn.createStatement();
                    ResultSet rs7 = st7.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques6 + ") and [Level] = 2 order by NEWID()");
                    while (rs7.next()) {
                        jLabelQuestion.setText(rs7.getString("Question"));
                        jRadioButtonA.setText(rs7.getString("Answer1"));
                        jRadioButtonB.setText(rs7.getString("Answer2"));
                        jRadioButtonC.setText(rs7.getString("Answer3"));
                        jRadioButtonD.setText(rs7.getString("Answer4"));
                        str = rs7.getString("RightAnswer").trim();
                        ques7 = rs7.getInt("QuesID");
                    }
                    break;
                case 8:
                    Statement st8 = conn.createStatement();
                    ResultSet rs8 = st8.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques6 + ", " + ques7 + ") and [Level] = 2 order by NEWID()");
                    while (rs8.next()) {
                        jLabelQuestion.setText(rs8.getString("Question"));
                        jRadioButtonA.setText(rs8.getString("Answer1"));
                        jRadioButtonB.setText(rs8.getString("Answer2"));
                        jRadioButtonC.setText(rs8.getString("Answer3"));
                        jRadioButtonD.setText(rs8.getString("Answer4"));
                        str = rs8.getString("RightAnswer").trim();
                        ques8 = rs8.getInt("QuesID");
                    }
                    break;
                case 9:
                    Statement st9 = conn.createStatement();
                    ResultSet rs9 = st9.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques6 + ", " + ques7 + ", " + ques8 + ") and [Level] = 2 order by NEWID()");
                    while (rs9.next()) {
                        jLabelQuestion.setText(rs9.getString("Question"));
                        jRadioButtonA.setText(rs9.getString("Answer1"));
                        jRadioButtonB.setText(rs9.getString("Answer2"));
                        jRadioButtonC.setText(rs9.getString("Answer3"));
                        jRadioButtonD.setText(rs9.getString("Answer4"));
                        str = rs9.getString("RightAnswer").trim();
                        ques9 = rs9.getInt("QuesID");
                    }
                    break;
                case 10:
                    Statement st10 = conn.createStatement();
                    ResultSet rs10 = st10.executeQuery("select top 1 * from Questions where [Level] = 3 order by NEWID()");
                    while (rs10.next()) {
                        jLabelQuestion.setText(rs10.getString("Question"));
                        jRadioButtonA.setText(rs10.getString("Answer1"));
                        jRadioButtonB.setText(rs10.getString("Answer2"));
                        jRadioButtonC.setText(rs10.getString("Answer3"));
                        jRadioButtonD.setText(rs10.getString("Answer4"));
                        str = rs10.getString("RightAnswer").trim();
                        ques10 = rs10.getInt("QuesID");
                    }
                    break;
                case 11:
                    Statement st11 = conn.createStatement();
                    ResultSet rs11 = st11.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques10 + ") and [Level] = 3 order by NEWID()");
                    while (rs11.next()) {
                        jLabelQuestion.setText(rs11.getString("Question"));
                        jRadioButtonA.setText(rs11.getString("Answer1"));
                        jRadioButtonB.setText(rs11.getString("Answer2"));
                        jRadioButtonC.setText(rs11.getString("Answer3"));
                        jRadioButtonD.setText(rs11.getString("Answer4"));
                        str = rs11.getString("RightAnswer").trim();
                        ques11 = rs11.getInt("QuesID");
                    }
                    break;
                case 12:
                    Statement st12 = conn.createStatement();
                    ResultSet rs12 = st12.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques10 + ", " + ques11 + ") and [Level] = 3 order by NEWID()");
                    while (rs12.next()) {
                        jLabelQuestion.setText(rs12.getString("Question"));
                        jRadioButtonA.setText(rs12.getString("Answer1"));
                        jRadioButtonB.setText(rs12.getString("Answer2"));
                        jRadioButtonC.setText(rs12.getString("Answer3"));
                        jRadioButtonD.setText(rs12.getString("Answer4"));
                        str = rs12.getString("RightAnswer").trim();
                        ques12 = rs12.getInt("QuesID");
                    }
                    break;
                case 13:
                    int out = JOptionPane.showConfirmDialog(jPanelPlayGame, "In question 13, you won't be able to stop the game."
                            +"\nDo you want to continue?", "Queston", JOptionPane.YES_NO_OPTION);
                    if (out == JOptionPane.YES_OPTION) {
                        jButtonStop.setEnabled(false);
                        Statement st13 = conn.createStatement();
                        ResultSet rs13 = st13.executeQuery("select top 1 * from Questions where QuesID not in (" + quesFlip + ", " + ques10 + ", " + ques11 + ", " + ques12 + ") and [Level] = 3 order by NEWID()");
                        while (rs13.next()) {
                            jLabelQuestion.setText(rs13.getString("Question"));
                            jRadioButtonA.setText(rs13.getString("Answer1"));
                            jRadioButtonB.setText(rs13.getString("Answer2"));
                            jRadioButtonC.setText(rs13.getString("Answer3"));
                            jRadioButtonD.setText(rs13.getString("Answer4"));
                            str = rs13.getString("RightAnswer").trim();
                        }
                    } else {
                        jLabelQuestion.setEnabled(false);
                        jRadioButtonA.setEnabled(false);
                        jRadioButtonB.setEnabled(false);
                        jRadioButtonC.setEnabled(false);
                        jRadioButtonD.setEnabled(false);
                        jRadioButton5050.setEnabled(false);
                        jRadioButtonFlip.setEnabled(false);
                        jRadioButtonDoubleDip.setEnabled(false);
                        jButtonStop.setEnabled(false);
                        endTime = System.currentTimeMillis();
                        time = (endTime - startTime) / 1000;
                        JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldCurrentScore.getText() 
                                + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
                        resultPlayer(jTextFieldCurrentScore.getText());
                        Start start = new Start();
                        start.setLocationRelativeTo(null);
                        start.setVisible(true);
                        this.setVisible(false);
                    }
                    break;
                default:
                    jLabelQuestion.setEnabled(false);
                    jRadioButtonA.setEnabled(false);
                    jRadioButtonB.setEnabled(false);
                    jRadioButtonC.setEnabled(false);
                    jRadioButtonD.setEnabled(false);
                    jRadioButton5050.setEnabled(false);
                    jRadioButtonFlip.setEnabled(false);
                    jRadioButtonDoubleDip.setEnabled(false);
                    jButtonStop.setEnabled(false);
                    jTextFieldNumber.setText("");
                    endTime = System.currentTimeMillis();
                    time = (endTime - startTime) / 1000;
                    JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldCurrentScore.getText() 
                            + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
                    resultPlayer(jTextFieldCurrentScore.getText());
                    Start start = new Start();
                    start.setLocationRelativeTo(null);
                    start.setVisible(true);
                    this.setVisible(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PlayGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jRadioButtonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAActionPerformed
        if (jRadioButtonDoubleDip.isSelected()) {
            buttonGroupHelp.clearSelection();
            if (jRadioButtonA.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jRadioButtonA.setEnabled(false);
                jButtonStop.setEnabled(false);
            }
        } else {
            if (jRadioButtonA.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jLabelQuestion.setEnabled(false);
                jRadioButtonA.setEnabled(false);
                jRadioButtonB.setEnabled(false);
                jRadioButtonC.setEnabled(false);
                jRadioButtonD.setEnabled(false);
                jRadioButton5050.setEnabled(false);
                jRadioButtonFlip.setEnabled(false);
                jRadioButtonDoubleDip.setEnabled(false);
                jButtonStop.setEnabled(false);
                endTime = System.currentTimeMillis();
                time = (endTime - startTime) / 1000;
                JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldScoreAnswerWrong.getText() 
                        + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
                resultPlayerWrong(jTextFieldScoreAnswerWrong.getText());
                Start start = new Start();
                start.setLocationRelativeTo(null);
                start.setVisible(true);
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_jRadioButtonAActionPerformed

    private void jRadioButtonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonBActionPerformed
        if (jRadioButtonDoubleDip.isSelected()) {
            buttonGroupHelp.clearSelection();
            if (jRadioButtonB.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jRadioButtonB.setEnabled(false);
                jButtonStop.setEnabled(false);
            }
        } else {
            if (jRadioButtonB.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jLabelQuestion.setEnabled(false);
                jRadioButtonA.setEnabled(false);
                jRadioButtonB.setEnabled(false);
                jRadioButtonC.setEnabled(false);
                jRadioButtonD.setEnabled(false);
                jRadioButton5050.setEnabled(false);
                jRadioButtonFlip.setEnabled(false);
                jRadioButtonDoubleDip.setEnabled(false);
                jButtonStop.setEnabled(false);
                endTime = System.currentTimeMillis();
                time = (endTime - startTime) / 1000;
                JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldScoreAnswerWrong.getText() 
                        + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
                resultPlayerWrong(jTextFieldScoreAnswerWrong.getText());
                Start start = new Start();
                start.setLocationRelativeTo(null);
                start.setVisible(true);
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_jRadioButtonBActionPerformed

    private void jRadioButtonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCActionPerformed
        if (jRadioButtonDoubleDip.isSelected()) {
            buttonGroupHelp.clearSelection();
            if (jRadioButtonC.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jRadioButtonC.setEnabled(false);
                jButtonStop.setEnabled(false);
            }
        } else {
            if (jRadioButtonC.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jLabelQuestion.setEnabled(false);
                jRadioButtonA.setEnabled(false);
                jRadioButtonB.setEnabled(false);
                jRadioButtonC.setEnabled(false);
                jRadioButtonD.setEnabled(false);
                jRadioButton5050.setEnabled(false);
                jRadioButtonFlip.setEnabled(false);
                jRadioButtonDoubleDip.setEnabled(false);
                jButtonStop.setEnabled(false);
                endTime = System.currentTimeMillis();
                time = (endTime - startTime) / 1000;
                JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldScoreAnswerWrong.getText() 
                        + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
                resultPlayerWrong(jTextFieldScoreAnswerWrong.getText());
                Start start = new Start();
                start.setLocationRelativeTo(null);
                start.setVisible(true);
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_jRadioButtonCActionPerformed

    private void jRadioButtonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDActionPerformed
        if (jRadioButtonDoubleDip.isSelected()) {
            buttonGroupHelp.clearSelection();
            if (jRadioButtonD.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jRadioButtonD.setEnabled(false);
                jButtonStop.setEnabled(false);
            }
        } else {
            if (jRadioButtonD.getText().substring(0, 1).equals(str)) {
                count++;
                startPlay();
            } else {
                jLabelQuestion.setEnabled(false);
                jRadioButtonA.setEnabled(false);
                jRadioButtonB.setEnabled(false);
                jRadioButtonC.setEnabled(false);
                jRadioButtonD.setEnabled(false);
                jRadioButton5050.setEnabled(false);
                jRadioButtonFlip.setEnabled(false);
                jRadioButtonDoubleDip.setEnabled(false);
                jButtonStop.setEnabled(false);
                endTime = System.currentTimeMillis();
                time = (endTime - startTime) / 1000;
                JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldScoreAnswerWrong.getText() 
                        + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
                resultPlayerWrong(jTextFieldScoreAnswerWrong.getText());
                Start start = new Start();
                start.setLocationRelativeTo(null);
                start.setVisible(true);
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_jRadioButtonDActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        jLabelQuestion.setEnabled(false);
        jRadioButtonA.setEnabled(false);
        jRadioButtonB.setEnabled(false);
        jRadioButtonC.setEnabled(false);
        jRadioButtonD.setEnabled(false);
        jRadioButton5050.setEnabled(false);
        jRadioButtonFlip.setEnabled(false);
        jRadioButtonDoubleDip.setEnabled(false);
        jButtonStop.setEnabled(false);
        endTime = System.currentTimeMillis();
        time = (endTime - startTime) / 1000;
        JOptionPane.showMessageDialog(jPanelPlayGame, "Your score is: " + jTextFieldCurrentScore.getText() 
                + "\nYour completion time is: " + time + "s", "Your game is over", JOptionPane.PLAIN_MESSAGE);
        resultPlayer(jTextFieldCurrentScore.getText());
        Start start = new Start();
        start.setLocationRelativeTo(null);
        //jButtonAccountPlayer.setText(fullname);
        start.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jRadioButton5050ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5050ActionPerformed
        jRadioButton5050.setEnabled(false);
        buttonGroupAnswer.clearSelection();
        if (jRadioButtonA.getText().substring(0, 1).equals(str)) {
            jRadioButtonB.setEnabled(false);
            jRadioButtonD.setEnabled(false);
        } else if (jRadioButtonB.getText().substring(0, 1).equals(str)) {
            jRadioButtonA.setEnabled(false);
            jRadioButtonC.setEnabled(false);
        } else if (jRadioButtonC.getText().substring(0, 1).equals(str)) {
            jRadioButtonA.setEnabled(false);
            jRadioButtonB.setEnabled(false);
        } else if (jRadioButtonD.getText().substring(0, 1).equals(str)) {
            jRadioButtonB.setEnabled(false);
            jRadioButtonC.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButton5050ActionPerformed

    private void jRadioButtonFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFlipActionPerformed
        jRadioButtonFlip.setEnabled(false);
        buttonGroupAnswer.clearSelection();
        count = count;
        try {
            Statement stFlip = conn.createStatement();
            if (count <= 5) {
                ResultSet rsFlip = stFlip.executeQuery("select top 1 * from Questions where QuesID not in (" + ques1 + ", " + ques2 + ", " + ques3 + ", " + ques4 + ", " + ques5 + ") and [Level] = 1 order by NEWID()");
                while (rsFlip.next()) {
                    jLabelQuestion.setText(rsFlip.getString("Question"));
                    jRadioButtonA.setText(rsFlip.getString("Answer1"));
                    jRadioButtonB.setText(rsFlip.getString("Answer2"));
                    jRadioButtonC.setText(rsFlip.getString("Answer3"));
                    jRadioButtonD.setText(rsFlip.getString("Answer4"));
                    str = rsFlip.getString("RightAnswer").trim();
                    quesFlip = rsFlip.getInt("QuesID");
                }
            } else if (count >= 6 && count <= 9) {
                ResultSet rsFlip = stFlip.executeQuery("select top 1 * from Questions where QuesID not in (" + ques6 + ", " + ques7 + ", " + ques8 + ", " + ques9 + ") and [Level] = 2 order by NEWID()");
                while (rsFlip.next()) {
                    jLabelQuestion.setText(rsFlip.getString("Question"));
                    jRadioButtonA.setText(rsFlip.getString("Answer1"));
                    jRadioButtonB.setText(rsFlip.getString("Answer2"));
                    jRadioButtonC.setText(rsFlip.getString("Answer3"));
                    jRadioButtonD.setText(rsFlip.getString("Answer4"));
                    str = rsFlip.getString("RightAnswer").trim();
                    quesFlip = rsFlip.getInt("QuesID");
                }
            } else if (count >= 10 && count <= 13) {
                ResultSet rsFlip = stFlip.executeQuery("select top 1 * from Questions where QuesID not in (" + ques10 + ", " + ques11 + ", " + ques12 + ") and [Level] = 3 order by NEWID()");
                while (rsFlip.next()) {
                    jLabelQuestion.setText(rsFlip.getString("Question"));
                    jRadioButtonA.setText(rsFlip.getString("Answer1"));
                    jRadioButtonB.setText(rsFlip.getString("Answer2"));
                    jRadioButtonC.setText(rsFlip.getString("Answer3"));
                    jRadioButtonD.setText(rsFlip.getString("Answer4"));
                    str = rsFlip.getString("RightAnswer").trim();
                    quesFlip = rsFlip.getInt("QuesID");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(PlayGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jRadioButtonFlipActionPerformed

    private void jRadioButtonDoubleDipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDoubleDipActionPerformed
        jRadioButtonDoubleDip.setEnabled(false);
        buttonGroupAnswer.clearSelection();
    }//GEN-LAST:event_jRadioButtonDoubleDipActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayGame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PlayGame playGame = new PlayGame();
                playGame.setLocationRelativeTo(null);
                playGame.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    public static javax.swing.ButtonGroup buttonGroupAnswer;
    public static javax.swing.ButtonGroup buttonGroupHelp;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JLabel jLabelCurrentScore;
    private javax.swing.JLabel jLabelQuestion;
    private javax.swing.JLabel jLabelScoreAnswerWrong;
    public static javax.swing.JPanel jPanelPlayGame;
    private javax.swing.JRadioButton jRadioButton5050;
    private javax.swing.JRadioButton jRadioButtonA;
    private javax.swing.JRadioButton jRadioButtonB;
    private javax.swing.JRadioButton jRadioButtonC;
    private javax.swing.JRadioButton jRadioButtonD;
    private javax.swing.JRadioButton jRadioButtonDoubleDip;
    private javax.swing.JRadioButton jRadioButtonFlip;
    private javax.swing.JTextField jTextFieldCurrentScore;
    private javax.swing.JTextField jTextFieldNumber;
    private javax.swing.JTextField jTextFieldScoreAnswerWrong;
    // End of variables declaration//GEN-END:variables
}
